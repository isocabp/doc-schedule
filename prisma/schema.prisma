generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  image    String?
  phone    String?
  role     Role    @default(PATIENT)

  specialty   String?
  healthPlans String[]

  appointmentsAsPatient Appointment[] @relation("PatientAppointments")
  appointmentsAsDoctor  Appointment[] @relation("DoctorAppointments")
  blockedDates          BlockedDate[] // Datas bloqueadas (ex.: férias)

  availabilities Availability[] // Relação inversa para disponibilidade

  patientNotesAsDoctor  PatientNote[] @relation("DoctorNotes")
  patientNotesAsPatient PatientNote[] @relation("PatientNotes")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id        String @id @default(uuid())
  patient   User   @relation("PatientAppointments", fields: [patientId], references: [id])
  patientId String

  doctor   User   @relation("DoctorAppointments", fields: [doctorId], references: [id])
  doctorId String

  date  DateTime
  notes String?

  isFirstAppointment Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id       String @id @default(uuid())
  doctor   User   @relation(fields: [doctorId], references: [id])
  doctorId String

  weekday   Int // 0 (Domingo) até 6 (Sábado)
  startTime String // Ex: "08:00"
  endTime   String // Ex: "17:00"
  interval  Int?      // Torna o campo opcional inicialmente

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlockedDate {
  id       String @id @default(uuid())
  doctor   User   @relation(fields: [doctorId], references: [id])
  doctorId String

  date   DateTime
  reason String?

  createdAt DateTime @default(now())
}

model PatientNote {
  id         String   @id @default(uuid())
  doctorId   String
  patientId  String
  content    String   @default("")
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  doctor     User     @relation("DoctorNotes", fields: [doctorId], references: [id])
  patient    User     @relation("PatientNotes", fields: [patientId], references: [id])

  @@index([doctorId])
  @@index([patientId])
}


enum Role {
  PATIENT
  DOCTOR
}
